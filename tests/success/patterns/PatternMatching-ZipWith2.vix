type List A = Nil | Cons A (Ptr (List A))

zipWith f (Ptr Nil) (Ptr Nil) = Ptr Nil
zipWith f (Ptr Nil) (Ptr Nil) = Ptr Nil
zipWith f (Ptr (Cons _ _)) (Ptr Nil) = Ptr Nil
zipWith f (Ptr Nil) (Ptr (Cons _ _)) = Ptr Nil
zipWith f (Ptr (Cons x xs)) (Ptr (Cons y ys)) = Ptr (Cons (f x y) (zipWith f xs ys))

test : Ptr (List int)
test = Ptr (Cons 2 (Ptr (Cons 3 (Ptr (Cons 5 (Ptr Nil))))))

deref : forall t. Ptr t -> t
deref p = case p of Ptr t -> t

sum xs = case deref xs of
  Nil -> 0
  Cons x xs -> addInt x (sum xs)

x = printInt (sum (zipWith addInt test test))
