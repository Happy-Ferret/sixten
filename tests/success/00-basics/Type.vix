the : (A : type) -> A -> A
the A a = a

type bool2 where
  True : bool2
  False : bool2

tt : bool2
tt = True
nil = Nil
myList : boolList
myList = Cons (the bool False) (Ptr (Cons (the bool True) (Ptr Nil)))
boolList = list bool

test (b : bool) = case b of
  False -> 0
  True -> 1

type list a where
  Nil : list a
  Cons : a -> ptr (list a) -> list a

type maybe a where
  Nothing : maybe a
  Just : a -> maybe a

tail : forall a. list a -> list a
tail xs = case xs of
  Nil -> Nil
  Cons x xs' -> deref xs'

tail' xs = case xs of
  Nil -> Nil
  Cons x xs' -> deref xs'

deref : forall t. ptr t -> t
deref p = case p of Ptr t -> t

map : forall (a b : type). (a -> b) -> list a -> list b
map f xs = case xs of
  Nil -> Nil
  Cons x xs' -> Cons (f x) (Ptr (map f (deref xs')))

mapp f xs = case xs of
  Nil -> Nil
  Cons x xs' -> Cons (f x) (Ptr (mapp f (deref xs')))

id x = x

propagationTest : bool
propagationTest = id (id True)

lift f x = f x (\y. y)

main1 = printInt (test propagationTest)
