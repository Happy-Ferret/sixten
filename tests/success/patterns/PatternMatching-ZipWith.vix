type List A = Nil | Cons A (Ptr (List A))

zipWith f (Ptr Nil) _ = Ptr Nil
zipWith f _ (Ptr Nil) = Ptr Nil
zipWith f (Ptr (Cons x xs)) (Ptr (Cons y ys)) = Ptr (Cons (f x y) (zipWith f xs ys))

map f (Ptr Nil) = Ptr Nil
map f (Ptr (Cons x xs)) = Ptr (Cons (f x) (map f xs))

list1 = Ptr (Cons 1 (Ptr (Cons 2 (Ptr (Cons 3 (Ptr Nil))))))
list2 = Ptr (Cons 10 (Ptr (Cons 20 (Ptr (Cons 30 (Ptr Nil))))))

main1 = map printInt (zipWith addInt list1 list2)
