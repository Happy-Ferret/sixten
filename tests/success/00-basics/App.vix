APP : forall T F. ((x : T) -> F x) -> (y : T) -> F y
APP f x = f x

APP2 : forall S G. ((z : S) -> G z) -> (w : S) -> G w
APP2 f x = APP f x

app : forall a b. (a -> b) -> a -> b
app = APP

app2 f x = APP f x

type list a = Nil | Cons a (ptr (list a))

map f (Ptr Nil) = Ptr Nil
map f (Ptr (Cons x xs)) = Ptr (Cons (f x) (map f xs))

myList = Ptr (Cons (APP (addInt 1) 2) (Ptr (Cons (app (addInt 2) 3) (Ptr (Cons (APP2 (addInt 3) 4) (Ptr (Cons (app2 (addInt 4) 5) (Ptr Nil))))))))

result = map printInt myList
