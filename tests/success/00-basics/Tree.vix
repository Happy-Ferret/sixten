type tree a where
  Leaf : a -> tree a
  Fork : ptr (tree a) -> ptr (tree a) -> tree a

deref : @(a : type) -> ptr a -> a
deref p = case p of Ptr x -> x

mapTree : forall a b. (a -> b) -> ptr (tree a) -> ptr (tree b)
mapTree f tree = Ptr case deref tree of
  Leaf a -> Leaf (f a)
  Fork t1 t2 -> Fork (mapTree f t1) (mapTree f t2)

sumTree : ptr (tree int) -> int
sumTree (Ptr (Leaf a)) = a
sumTree (Ptr (Fork t1 t2)) = addInt (sumTree t1) (sumTree t2)

myTree : ptr (tree int)
myTree = Ptr (Fork (Ptr (Leaf 1)) (Ptr (Fork (Ptr (Fork (Ptr (Leaf 2)) (Ptr (Leaf 3)))) (Ptr (Leaf 4)))))

main1 = printInt (sumTree myTree)
