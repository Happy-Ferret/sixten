letIn1 = let x = 123 in x

letIn2 =
  let x = 123
  in x

letNoIn =
  let x = 123
  x

mutualLets =
  let x = y
      y = z
      z = 123
  x

letArg =
  let f x = addInt x 2
  f let x = 3 in x

letTypeSig =
  let i : int
      i = 23
      j : int
      j = 100
  addInt i j

wheres = addInt i j
  where
    i : int
    i = 23
    j : int
    j = 100

type List a = Nil | Cons a (Ptr (List a))

map f (Ptr Nil) = Ptr Nil
map f (Ptr (Cons x xs)) = Ptr (Cons (f x) (map f xs))

main = map printInt
  (Ptr (Cons letIn1
  (Ptr (Cons letIn2
  (Ptr (Cons letNoIn
  (Ptr (Cons mutualLets
  (Ptr (Cons letArg
  (Ptr (Cons letTypeSig
  (Ptr (Cons wheres
  (Ptr Nil)))))))))))))))
