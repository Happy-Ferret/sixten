deref : @(a : type) -> ptr a -> a
deref ptr = case ptr of
  Ptr a -> a

type list a where
  Nil : list a
  Cons : a -> ptr (list a) -> list a

error 0 = error 0

head : @(a : type) -> ptr (list a) -> a
head xs = case deref xs of
  Cons a _ -> a
  Nil -> error 0

tail : @(a : type) -> ptr (list a) -> list a
tail xs = case deref xs of
  Cons _ xs -> deref xs
  Nil -> error 0

aList = Ptr (Cons 1 (Ptr (Cons 2 (Ptr Nil))))

val1 = printInt (head aList)
val2 = printInt (head (Ptr (tail aList)))
