deref : forall (t : type). ptr t -> t
deref p = case p of Ptr t -> t

the : (A : type) -> A -> A
the _ a = a

type list (A : type) where
  Nil : list A
  Cons : A -> ptr (list A) -> list A

type list2 (A : type) where
  Nil2 : list2 A
  Cons2 : A -> ptr (list2 A) -> list2 A

tail : forall (A : type). ptr (list A) -> ptr (list A)
tail xs = case deref xs of
  Cons x xs' -> xs'
  Nil -> xs

tail2 xs = case deref xs of
  Cons x xs' -> xs'
  Nil -> xs

tail3 : forall A. ptr (list A) -> ptr (list A)
tail3 xs = case deref xs of
  Cons x xs' -> xs'
  Nil -> xs

map : forall (a b : type). (a -> b) -> ptr (list a) -> ptr (list b)
map f xs = Ptr (case deref xs of
  Nil -> Nil
  Cons x xs' -> Cons (f x) (map f xs'))

map2 f xs = Ptr (case deref xs of
  Nil -> Nil
  Cons x xs' -> Cons (f x) (map2 f xs'))

dumbId xs = case xs of
  Nil -> Nil
  Cons x xs' -> Cons x xs'

map3 f xs = case deref xs of
  Cons x xs' -> Ptr (Cons (f x) (map3 f xs'))
  Nil -> Ptr (the (list _) Nil)

map4 f xs = case deref xs of
  Cons x xs' -> Ptr (Cons (f x) (map4 f xs'))
  Nil -> Ptr Nil

testList : ptr (list int)
testList = Ptr (Cons 1 (Ptr (Cons 2 (Ptr (Cons 3 (Ptr Nil))))))

add3 : int -> int -> int -> int
add3 a b c = addInt (addInt a b) c

sum : ptr (list int) -> int
sum xs = case deref xs of
  Nil -> 0
  Cons x xs' -> addInt x (sum xs')

print1 = printInt (sum (map (add3 1 2) testList))
print2 = printInt (sum (map (\f. f 2) (map (add3 1) testList)))
print3 = printInt (sum (map (\f. f 2) (map (\f. f 1) (map add3 testList))))
