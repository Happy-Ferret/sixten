type Unit' = unit

type Tuple A B = tuple A B

type Nat' = Z | S (Ptr Nat')

addNat : Ptr Nat' -> Ptr Nat' -> Ptr Nat'
addNat (Ptr Z) n = n
addNat (Ptr (S m)) n = Ptr (S (addNat m n))

Vector' : ptr nat' -> type -> type
Vector' (Ptr Z) _ = Unit'
Vector' (Ptr (S n)) a = Tuple a (Vector' n a)

sum : (n : _) -> Vector' n int -> int
sum (Ptr Z) unit = 0
sum (Ptr (S n)) (tuple x xs) = addInt x (sum n xs)

append : (a m n : _) -> Vector' m a -> Vector' n a -> Vector' (addNat m n) a
append _ (Ptr Z) n unit ys = ys
append a (Ptr (S m)) n (tuple x xs) ys = tuple x (append a m n xs ys)

two = Ptr (S (Ptr (S (Ptr Z))))
three = Ptr (S (Ptr (S (Ptr (S (Ptr Z))))))

test = printint (sum (addNat three two) (append int three two (tuple 1 (tuple 2 (tuple 3 unit))) (tuple 12 (tuple 13 unit))))
