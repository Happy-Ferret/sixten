type unit' = Unit'

type tuple A B = Tuple A B

addNat : nat -> nat -> nat
addNat Zero n = n
addNat (Succ m) n = Succ (addNat m n)

vector' : nat -> type -> type
vector' Zero _ = unit'
vector' (Succ n) a = tuple a (vector' n a)

sumVec : (n : _) -> vector' n int -> int
sumVec Zero Unit' = 0
sumVec (Succ n) (Tuple x xs) = addInt x (sumVec n xs)

appendVec : forall a. (m n : _) -> vector' m a -> vector' n a -> vector' (addNat m n) a
appendVec Zero n Unit' ys = ys
appendVec @a (Succ m) n (Tuple x xs) ys = Tuple x (appendVec @a m n xs ys)

type array' A where
  array : (n : _) -> ptr (vector' n A) -> array' A

one = Succ Zero
two = Succ one
three = Succ two

test : array' (tuple int int)
test = array two (Ptr (Tuple (Tuple 1 2) (Tuple (Tuple 3 4) Unit')))

test2 : array' (tuple int int)
test2 = array three (Ptr (Tuple (Tuple 12 13) (Tuple (Tuple 14 15) (Tuple (Tuple 16 17) Unit'))))

mapVec : forall A B. (n : _) -> (A -> B) -> vector' n A -> vector' n B
mapVec Zero f Unit' = Unit'
mapVec (Succ n) f (Tuple a xs) = Tuple (f a) (mapVec n f xs)

appendArr : forall A. array' A -> array' A -> array' A
appendArr @A (array m (Ptr xs)) (array n (Ptr ys)) = array (addNat m n) (Ptr (appendVec @A m n xs ys))

mapArr : forall A B. (A -> B) -> array' A -> array' B
mapArr f (array m (Ptr xs)) = array m (Ptr (mapVec m f xs))

test3 = mapArr printInt (mapArr (\(Tuple x y). addInt x y) (appendArr test test2))
