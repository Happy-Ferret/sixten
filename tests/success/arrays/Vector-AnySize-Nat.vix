type Unit' = unit

type Tuple A B = tuple A B

type Nat' = Z | S (Ptr Nat')

Vector' : ptr nat' -> type -> type
Vector' (Ptr Z) _ = Unit'
Vector' (Ptr (S n)) a = Tuple a (Vector' n a)

sumVec : (n : _) -> Vector' n int -> int
sumVec (Ptr Z) unit = 0
sumVec (Ptr (S n)) (tuple x xs) = addInt x (sumVec n xs)

three = Ptr (S (Ptr (S (Ptr (S (Ptr Z))))))

test = printInt (sumVec three (tuple 1 (tuple 2 (tuple 3 unit))))
