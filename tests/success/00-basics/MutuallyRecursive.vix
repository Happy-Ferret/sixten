type nat' where
  Zero : nat'
  Succ : ptr nat' -> nat'

deref p = case p of
  Ptr x -> x

not b = case b of
  False -> True
  True -> False

odd : ptr nat' -> bool
odd x = case deref x of
  Zero -> False
  Succ n -> even n

even : ptr nat' -> bool
even x = case deref x of
  Zero -> True
  Succ n -> odd n

boolToInt b = case b of
  False -> 0
  True -> 1

zero : ptr nat'
zero = Ptr Zero
one : ptr nat'
one = Ptr (Succ zero)
two : ptr nat'
two = Ptr (Succ one)
three : ptr nat'
three = Ptr (Succ two)

type list a where
  Nil : list a
  Cons : a -> ptr (list a) -> list a

numbers = Ptr (Cons zero (Ptr (Cons one (Ptr (Cons two (Ptr (Cons three (Ptr Nil))))))))

map f xs = Ptr case deref xs of
  Nil -> Nil
  Cons x xs' -> Cons (f x) (map f xs')

result = map (\x. printInt (boolToInt (even x))) numbers
