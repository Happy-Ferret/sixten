class Monad m where
  return : forall a. a -> m a
  bind : forall a b. m a -> (a -> m b) -> m b

type Maybe a
  = Nothing
  | Just a

instance Monad Maybe where
  return = Just
  bind Nothing _ = Nothing
  bind (Just a) f = f a

type List a
  = Nil
  | Cons a (Ptr (List a))

append : forall a. List a -> List a -> List a
append Nil ys = ys
append (Cons x (Ptr xs)) ys = Cons x (Ptr (append xs ys))

instance Monad List where
  return a = Cons a (Ptr Nil)
  bind Nil f = Nil
  bind (Cons x (Ptr xs)) f = append (f x) (bind xs f)

mapM
  : forall a b m
  . Monad m
  => (a -> m b)
  -> List a
  -> m (List b)
mapM f Nil = return Nil
mapM f (Cons x (Ptr xs)) = bind (f x) (\y. bind (mapM f xs) (\ys. return (Cons y (Ptr ys))))

xs =
  Cons 1 (Ptr
  (Cons 2 (Ptr
  (Cons 3 (Ptr
  Nil)))))

main
  = Cons (mapM (\x. Cons (printInt x) (Ptr Nil)) xs) (Ptr case mapM Just xs of
  Just _ -> (\x. Nil) (printInt 610)
  Nothing -> (\x. Nil) (printInt 666))
